from aiogram import types, executor, Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.types.input_file import InputFile
import os
import aiohttp

class ExchangeForm(StatesGroup):
    —Åurrency_from = State()
    currency_to = State()
    quantity = State() 


async def weather(city_name: str) -> str:
    '''
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ 
    API OpenWeatherAPI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 
    –≥—Ä–∞–¥—É—Å—ã —Ü–µ–ª—å—Å–∏—è
    '''
    async with aiohttp.ClientSession() as session:
        async with session.get(f'http://api.openweathermap.org/geo/1.0/direct?q={city_name}&limit=1&appid={API_WEATHER}') as response:
            result = await response.json()
            if len(result) < 1: # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—Ä–∏—à–µ–ª –ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                return None
            lat = result[0]['lat']
            lon = result[0]['lon']
    
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API_WEATHER}&units=metric') as response:
            result = await response.json()
            data = result['main']['temp']
    
    return data

'''
–ë–µ—Ä–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ Windows, –Ω—É–∂–Ω–æ –≤ cmd –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
set TOKEN="–¢–æ–∫–µ–Ω_–≤–∞—à–µ–≥–æ_–±–æ—Ç–∞"
'''
API_EXCHANGE = os.environ.get('API_EXCHANGE', 'TE3fYoK9we5P2Khtm8SvbaTp3mFw0djb')
API_WEATHER = os.environ.get('API_WEATHER', '62d12181917e61699eaa46ce67509b48')
TOKEN = os.environ.get('TOKEN')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
start_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å")
weather_btn = types.KeyboardButton('–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É üå§')
currency_btn = types.KeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç üí±')
animal_btn = types.KeyboardButton('–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏ üê∂')
polls_btn = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è –≥—Ä—É–ø–ø—ã üìä')

start_kb.add(weather_btn).add(currency_btn).add(animal_btn).add(polls_btn)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–≥–æ–¥—ã
weather_kb = types.InlineKeyboardMarkup()
w_btn1 = types.InlineKeyboardButton('–ú–æ—Å–∫–≤–∞', callback_data='w–ú–æ—Å–∫–≤–∞')
w_btn2 = types.InlineKeyboardButton('–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', callback_data='w–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥')
w_btn3 = types.InlineKeyboardButton('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', callback_data='w–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
w_btn4 = types.InlineKeyboardButton('–ö–∞–∑–∞–Ω—å', callback_data='w–ö–∞–∑–∞–Ω—å')
w_btn5 = types.InlineKeyboardButton('–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', callback_data='w–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥')
w_btn6 = types.InlineKeyboardButton('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', callback_data='w–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫')
weather_kb.add(w_btn1).add(w_btn2).add(w_btn3).add(w_btn4).add(w_btn5).add(w_btn6)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
list_cur = ['RUB', 'KZT', 'USD', 'EUR', 'CNY', 'BYR']
exc_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
e_btn1 = types.KeyboardButton('RUB')
e_btn2 = types.KeyboardButton('KZT')
e_btn3 = types.KeyboardButton('USD')
e_btn4 = types.KeyboardButton('EUR')
e_btn5 = types.KeyboardButton('CNY')
e_btn6 = types.KeyboardButton('BYR')
e_btn7 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')

exc_kb.add(e_btn1).add(e_btn2).add(e_btn3).add(e_btn4).add(e_btn5).add(e_btn6).add(e_btn7)


@dp.message_handler(commands=['start'])
async def startMessage(message: types.Message):
    await message.answer('''–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å''', reply_markup=start_kb)

@dp.message_handler(Text(equals='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', ignore_case=True), state='*')
async def cancelState(message: types.Message, state: FSMContext):
    '''
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–π—Ç–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    '''
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –±–æ—Ç–∞', reply_markup=start_kb)
    await state.finish()

@dp.message_handler(state=ExchangeForm.—Åurrency_from)
async def process_currency_from(message: types.Message, state: FSMContext):
    """
    –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã (–∏–∑ –∫–∞–∫–æ–π –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å)
    """
    if message.text not in list_cur:
        await message.answer('–¢–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=start_kb)
        return
    async with state.proxy() as data:
        data['from'] = message.text

    await ExchangeForm.next()
    await message.answer("–í –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=exc_kb)

@dp.message_handler(state=ExchangeForm.currency_to)
async def process_gender(message: types.Message, state: FSMContext):
    """
    –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã (–≤ –∫–∞–∫—É—é –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å)
    """

    if message.text not in list_cur:
        await message.answer('–¢–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=start_kb)
        return

    async with state.proxy() as data:
        data['to'] = message.text

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
    markup.add(btn)

    await ExchangeForm.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —ç—Ç—É –≤–∞–ª—é—Ç—É', reply_markup=markup)

@dp.message_handler(state=ExchangeForm.currency_to)
async def process_currency_to(message: types.Message, state: FSMContext):
    if message.text not in list_cur:
        await message.answer('–¢–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', reply_markup=start_kb)
        return

    async with state.proxy() as data:
        data['quantity'] = message.text

    await ExchangeForm.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —ç—Ç—É –≤–∞–ª—é—Ç—É')

@dp.message_handler(state=ExchangeForm.quantity)
async def process_result(message: types.Message, state: FSMContext):
    if not message.text.replace(' ', '').isdigit():
        await message.answer('–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–∞ —Å—É–º–º–∞.\n–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.')
        return
    async with state.proxy() as data:
        data['quantity'] = message.text
    

    async with aiohttp.ClientSession() as session:
        from_c = data['from']
        to_c = data['to']
        amount = data['quantity']
        async with session.get(f'https://api.apilayer.com/exchangerates_data/convert?apikey={API_EXCHANGE}&to={from_c}&from={to_c}&amount={amount}') as response:
            result = await response.json()
            res = result['result']

    await message.answer(f'{from_c} ‚û° {to_c} = {res}{to_c}', reply_markup=start_kb)
    await state.finish()

@dp.callback_query_handler()
async def get_weather(callback_query: types.CallbackQuery):
    if callback_query.data and callback_query.data.startswith('w'):
        city_name = callback_query.data.replace('w', '')
        temp = await weather(city_name)
        await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
        await bot.send_message(callback_query.from_user.id, text=f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_name} - {int(temp)} ‚ÑÉ', reply_markup=weather_kb)

@dp.message_handler()
async def weather_list(message: types.Message):
    if message.text == '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É üå§':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥', reply_markup=weather_kb)
    if message.text == '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç üí±':
        await ExchangeForm.—Åurrency_from.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏', reply_markup=exc_kb)
    if message.text == '–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏ üê∂':
        async with aiohttp.ClientSession() as session:
            async with session.get(f'https://random.dog/woof') as response:
                endpoint = await response.text()
        
        url = 'https://random.dog/' + endpoint
        await bot.send_photo(chat_id=message.chat.id, photo=url)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

